"use strict";(self.webpackChunktsdoc_org=self.webpackChunktsdoc_org||[]).push([[5422],{158:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>g});var n=o(6393);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=p(o),m=r,g=d["".concat(c,".").concat(m)]||d[m]||f[m]||a;return o?n.createElement(g,s(s({ref:t},l),{},{components:o})):n.createElement(g,s({ref:t},l))}));function g(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=o[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},3944:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var n=o(9122),r=o(2501),a=(o(6393),o(158)),s=["components"],i={title:"@microsoft/tsdoc-config"},c=void 0,p={unversionedId:"pages/packages/tsdoc-config",id:"pages/packages/tsdoc-config",title:"@microsoft/tsdoc-config",description:"NPM package",source:"@site/docs/pages/packages/tsdoc-config.md",sourceDirName:"pages/packages",slug:"/pages/packages/tsdoc-config",permalink:"/pages/packages/tsdoc-config",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/tsdoc.org/docs/pages/packages/tsdoc-config.md",tags:[],version:"current",frontMatter:{title:"@microsoft/tsdoc-config"},sidebar:"docsSidebar",previous:{title:"@microsoft/tsdoc",permalink:"/pages/packages/tsdoc"},next:{title:"eslint-plugin-tsdoc",permalink:"/pages/packages/eslint-plugin-tsdoc"}},l={},d=[{value:"Creating config files",id:"creating-config-files",level:2},{value:"API Usage",id:"api-usage",level:2}],f={toc:d},m="wrapper";function g(e){var t=e.components,o=(0,r.Z)(e,s);return(0,a.kt)(m,(0,n.Z)({},f,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@microsoft/tsdoc-config"},"NPM package"),(0,a.kt)("br",null),"\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/main/tsdoc-config/CHANGELOG.md"},"CHANGELOG.md")),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"@microsoft/tsdoc-config")," package is an optional add-on for loading the ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," file format that enables\nusers to define custom TSDoc tags. (This functionality was moved to its own package because it requires external\ndependencies such as NodeJS and ",(0,a.kt)("inlineCode",{parentName:"p"},"ajv"),", whereas the main package is fully self-contained.)"),(0,a.kt)("h2",{id:"creating-config-files"},"Creating config files"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," file is optional. When used, it is expected to be found in the same folder as\nthe ",(0,a.kt)("strong",{parentName:"p"},"tsconfig.json")," file for a project. The loader looks for it by walking upwards in the directory tree\nuntil it finds a folder containing ",(0,a.kt)("strong",{parentName:"p"},"tsconfig.json")," or ",(0,a.kt)("strong",{parentName:"p"},"package.json"),", and then it attempts to load\n",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," from that location."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," file conforms to the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json"},"tsdoc.schema.json")," JSON schema. It defines tags using\nsimilar fields as the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/blob/main/tsdoc/src/configuration/TSDocTagDefinition.ts"},"TSDocTagDefinition"),"\nAPI used by ",(0,a.kt)("inlineCode",{parentName:"p"},"TSDocParser")," from ",(0,a.kt)("strong",{parentName:"p"},"@microsoft/tsdoc"),"."),(0,a.kt)("p",null,"Here's a simple example:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",\n  "tagDefinitions": [\n    {\n      "tagName": "@myTag",\n      "syntaxKind": "modifier"\n    }\n  ]\n}\n')),(0,a.kt)("p",null,"If you want to define custom tags in one place and share them across multiple projects, the ",(0,a.kt)("inlineCode",{parentName:"p"},"extends")," field specifies\na list of paths that will be mixed in with the current file:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",\n  "extends": [\n    "my-package/dist/tsdoc-base.json",\n    "./path/to/local/file/tsdoc-local.json"\n  ]\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"NOTE: The ",(0,a.kt)("inlineCode",{parentName:"p"},"extends")," paths are resolved using NodeJS module resolution, so local paths must begin with ",(0,a.kt)("inlineCode",{parentName:"p"},"./")," to avoid\nbeing interpreted as an NPM package name.")),(0,a.kt)("h2",{id:"api-usage"},"API Usage"),(0,a.kt)("p",null,"The code sample below illustrates how to invoke the ",(0,a.kt)("strong",{parentName:"p"},"@microsoft/tsdoc-config")," API to load a\n",(0,a.kt)("strong",{parentName:"p"},"tsdoc.json")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import * as path from 'path';\nimport { TSDocParser, TSDocConfiguration } from '@microsoft/tsdoc';\nimport { TSDocConfigFile } from '@microsoft/tsdoc-config';\n\n// Sample source file to be parsed\nconst mySourceFile: string = 'my-project/src/example.ts';\n\n// Load the nearest config file, for example `my-project/tsdoc.json`\nconst tsdocConfigFile: TSDocConfigFile = TSDocConfigFile.loadForFolder(path.dirname(mySourceFile));\nif (tsdocConfigFile.hasErrors) {\n  // Report any errors\n  console.log(tsdocConfigFile.getErrorSummary());\n}\n\n// Use the TSDocConfigFile to configure the parser\nconst tsdocConfiguration: TSDocConfiguration = new TSDocConfiguration();\ntsdocConfigFile.configureParser(tsdocConfiguration);\nconst tsdocParser: TSDocParser = new TSDocParser(tsdocConfiguration);\n")))}g.isMDXComponent=!0}}]);