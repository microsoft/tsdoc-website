"use strict";(self.webpackChunktsdoc_org=self.webpackChunktsdoc_org||[]).push([[9766],{158:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(6393);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},408:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>c,toc:()=>u});var r=n(9122),a=n(2501),o=(n(6393),n(158)),i=["components"],s={title:"@link"},l=void 0,c={unversionedId:"pages/tags/link",id:"pages/tags/link",title:"@link",description:"|    |    |",source:"@site/docs/pages/tags/link.md",sourceDirName:"pages/tags",slug:"/pages/tags/link",permalink:"/pages/tags/link",draft:!1,editUrl:"https://github.com/microsoft/rushstack-websites/tree/main/websites/tsdoc.org/docs/pages/tags/link.md",tags:[],version:"current",frontMatter:{title:"@link"},sidebar:"docsSidebar",previous:{title:"@label",permalink:"/pages/tags/label"},next:{title:"@override",permalink:"/pages/tags/override"}},p={},u=[{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2}],m={toc:u},d="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Standardization:"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/pages/spec/standardization_groups"},"Core"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Syntax kind:"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/pages/spec/tag_kinds"},"Inline tag"))))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"{@link}")," inline tag is used to create hyperlinks to other pages in a\ndocumentation system or general internet URLs. In particular, it supports\nexpressions for referencing API items."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: The notation for declaration references has not been finalized. See GitHub\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/tsdoc/issues/9"},"issue #9"))),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'/**\n * Let\'s learn about the `{@link}` tag.\n *\n * @remarks\n *\n * Links can point to a URL: {@link https://github.com/microsoft/tsdoc}\n *\n * Links can point to an API item: {@link Button}\n *\n * You can optionally include custom link text: {@link Button | the Button class}\n *\n * Suppose the `Button` class is part of an external package.  In that case, we\n * can include the package name when referring to it:\n *\n * {@link my-control-library#Button | the Button class}\n *\n * The package name can include an NPM scope and import path:\n *\n * {@link @microsoft/my-control-library/lib/Button#Button | the Button class}\n *\n * The TSDoc standard calls this notation a "declaration reference".  The notation supports\n * references to many different kinds of TypeScript declarations.  This notation was originally\n * designed for use in `{@link}` and `{@inheritDoc}` tags, but you can also use it in your\n * own custom tags.\n *\n * For example, the `Button` can be part of a TypeScript namespace:\n *\n * {@link my-control-library#controls.Button | the Button class}\n *\n * We can refer to a member of the class:\n *\n * {@link controls.Button.render | the render() method}\n *\n * If a static and instance member have the same name, we can use a selector to distinguish them:\n *\n * {@link controls.Button.(render:instance) | the render() method}\n *\n * {@link controls.Button.(render:static) | the render() static member}\n *\n * This is also how we refer to the class\'s constructor:\n *\n * {@link controls.(Button:constructor) | the class constructor}\n *\n * Sometimes a name has special characters that are not a legal TypeScript identifier:\n *\n * {@link restProtocol.IServerResponse."first-name" | the first name property}\n *\n * Here is a fairly elaborate example where the function name is an ECMAScript 6 symbol,\n * and it\'s an overloaded function that uses a label selector (defined using the `{@label}`\n * TSDoc tag):\n *\n * {@link my-control-library#Button.([UISymbols.toNumberPrimitive]:OVERLOAD_1)\n * | the toNumberPrimitive() static member}\n *\n * See the TSDoc spec for more details about the "declaration reference" notation.\n */\n')))}f.isMDXComponent=!0}}]);